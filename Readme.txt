Tutorial: The code for CITRATE 1.0 is written in Fortran90 with the Intel Fortran compiler used. We have tested the codes on macOS Sierra 10.12.5 (i386 processor) and also a GNU/Linux cluster with x86-64 architechture. The user is supposed to be familiar with the Fortran language and has some basic knowledge of BASH. Some post-processing scripts are also written in the free software R (version 3.3.2). Below we give some instructions and explanations of the codes and how to run the model.

1. How to run the model:
1) Go to the directory you want to run the model (we assume that the root directory is under home directory: ~/).
2) Type: "git clone https://github.com/BingzhangChen/NPZDFeCONT.git".
3) Type: "cd "

 For each station, four different physics forcing data including vertical profiles of eddy diffusive coefficients and temperatures, surface PAR and atmospheric dust deposition. We already provided the relevant data for stations S1 and K2. The temporal resolution is one day for the vertical eddy diffusivity and one month for three other types of data. After downloading the folder FlexEFT1D, go to the directory FlexEFT1D/DRAM_0.9/NPZDcont/BOTH and type vi run. The user can change the value of Test inside the bash script run. The Test value being 0 means a fast run, usually for a formal model run for a large number of iterations. The Test value being 1 means running a model for debugging, which is much slower than the fast run. The user can also modify the compiler flags depending on the purpose in the script. Having chosen the right compiler option, type ./run, the model will compile and an executable file (NPZDCONT) will be generated. The next step is to type vi Model.nml, the file containing two namelists. The namelist &Model contains the options for station names, the type of ecological model, the type of nutrient uptake function (1 only for NPZDFeCONT), and the type for grazing function (four different grazing functions including the three Holling type functions and the Ivlev function). The station name determines the right physics files to be read and the filenames for model output. For now we only allow three possible stations: S1, K2, and HOT. Other station names will generate an error. If the user wants to add more station names, the subroutine Setup_OBSdata within MOD_1D.f90 is the place to be modified. A number of ecological models besides NPZDFeCONT have been developed. It is beyond the scope of the present study to describe all of them in detail. Just note that the model lists are in the fortran file bio_MOD.f90 and some other details are in choose_model.f90 and MOD_1D.f90. The namelist &MCMCrun contains the options for defining the total length of the MCMC chain which is at least 2, the number of the ensemble runs, the number of days for each model run, whether the model should start from previous runs (Readfile = 1) or start a new run (Readfile = 0), and the number of runs in the historical files (enssig and enspar).
After defining all the model settings, type “./NPZDCONT” and then the model will run and some outputs will be shown on the screen. Type “./NPZDCONT > out” to make the model outputs stored in the “out” file. For each model run, the model saves the current parameters into the “enspar” file and the current values of σ and SsqE into the ‘enssig’ file. In this way, even if the model crashes, the user can pick up the current parameter position and updated parameter covariance matrix. The model also generates the files of best parameters, best σ and SsqE files, best model output files that correspond to observational data, and model output files at daily resolution at each grid after an ensemble run.

Code structure: All the source files including the makefile are stored in the src folder. Here we briefly describe the functions of the most important source files: Main.f90: The main program for DRAM that calls each subroutine in serial.

MOD_1D.f90: The major module that sets up and runs the 1D model. The module also generates model output that matches with the observational data.

Interface_MOD.f90: the module that initializes the absolute and normalized parameter vectors, the covariance matrix of the parameters, the prior parameter values, and the upper and lower parameter boundaries.

SUB_MOD.f90: the module that calculates sum of squared errors (SSqE) between model outputs and observational data. This module also contains the I/O subroutines that save the parameters, σ, and SSqE for each iteration. It also contains the major subroutine MCMC_adapt that determines whether to accept new parameters, updates covariance matrix, proposes new parameter vectors and calls the subroutine that runs the 1D model with the newly proposed parameters.

choose_model.f90: the subroutine that defines the number and indices of tracers and the model outputs that need to be written into the output file.

NPZD_cont.f90: the major biological subroutine for the NPZDFeCONT model.

bio_MOD.f90: the module that declares most of the model names, indices for model input and output variables and parameters.
